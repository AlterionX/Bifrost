>./intermediate/%s.irl

/DECODE PRGM
    /CATCHALL

        %F :
        %OUTPUT

    /END
/END
/DECODE FUNC_SEQ
    /CATCHALL

        %F :
        %OUTPUT

    /END
/END
/DECODE FUNC_DEC
    /CATCHALL

        %F :

        scopein
        __F_%0%GEF:
        scopein
        %OUTPUT2
        scopein
        %OUTPUT1
        return
        scopeout
        scopeout

    /END
/END
/DECODE FUNC_CALL
    /CATCHALL

        %F: _v%GEN
        callbegin
        %OUTPUT
        %F = call %0
        callrestore

    /END
/END
/DECODE SEQ
    /CATCHALL

        %F :
        scopein
        %OUTPUT
        scopeout

    /END
/END
/DECODE STMT
    /CATCHALL

        %F :
        %OUTPUT

    /END
/END
/DECODE VAR_ACCSS
    /COND 1 L_BRACK

        %F : %1
        %OUTPUT

    /END
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END
/DECODE VAR_DEC
    /COND 1 L_BRACK

        %F : %4
        stack %0 * %2 -> %F
        %OUTPUT

    /END
    /CATCHALL

        %F : %1
        var_dec %SYM_PROPERTY:%0:type:sizeof% -> %F
        %OUTPUT

    /END
/END
/DECODE ASSIGNMENT
    /CATCHALL

        %F :
        %OUTPUT
        %1 <- %0

    /END
/END
/DECODE EXPR
    /COND -1 C_ARGLIST

        %F:
        %OUTPUT
        push %0

    /END
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END
/DECODE BOOL
    /COND 1 BOOL_EQ

        %F : _v%GEN
        %OUTPUT
        %F = %0 == %2

    /END
    /COND 1 BOOL_NEQ

        %F : _v%GEN
        %OUTPUT
        %F = %0 != %2

    /END
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END

/DECODE SUMS
    /COND 1 MINUS

        %F : _v%GEN
        %OUTPUT
        %F = %0 - %2

    /END
    /COND 1 PLUS

        %F : _v%GEN
        %OUTPUT
        %F = %0 + %2

    /END
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END
/DECODE COMP
    /COND 1 BOOL_GT

        %F : _v%GEN
        %OUTPUT
        %F = %0 > %2

    /END
    /COND 1 BOOL_LT

        %F : _v%GEN
        %OUTPUT
        %F = %0 > %2

    /END
    /COND 1 BOOL_GEQ

        %F : _v%GEN
        %OUTPUT
        %F = %0 >= %2

    /END
    /COND 1 BOOL_LEQ

        %F : _v%GEN
        %OUTPUT
        %F = %0 <= %2

    /END
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END
/DECODE PROD
    /COND 1 MULT

        %F : _v%GEN
        %OUTPUT
        %F = %0 * %2

    /END
    /COND 1 DIVI

        %F : _v%GEN
        %OUTPUT
        %F = %0 / %2

    /END
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END
/DECODE BASE
    /CATCHALL

        %F : %0
        %OUTPUT

    /END
/END
/DECODE NAME
    /CATCHALL

        %F : %~
        %OUTPUT

    /END
/END
/DECODE NUMBER
    /CATCHALL

        %F : %~
        %OUTPUT

    /END
/END
/DECODE NEG_NUM
    /CATCHALL

        %F : _v%GEN
        %OUTPUT
        %F = 0 - %1

    /END
/END
/DECODE RETURN_STMT
    /COND 0 EXPR

        %F :
        %OUTPUT
        return %0

    /END
    /CATCHALL

        %F:

        %OUTPUT
        return

    /END
/END
/DECODE IF_STMT
    /COND 2 STMT

        %F:

        __IF_START%GEL:
        %OUTPUT1
        IFZ %0 hop __ELSE_START%RGEL
        %OUTPUT1
        hop __ENDIF%RGEL:
        __ELSE_START%RGEL:
        %OUTPUT1
        __ENDIF%RGEL:

    /END
    /CATCHALL

        %F:

        __IF_START%GEL:
        %OUTPUT1
        IFZ %0 hop __ENDIF%RGEL
        %OUTPUT1
        __ENDIF%RGEL:

    /END
/END
/DECODE C_ARGLIST
    /CATCHALL

        %F:
        %OUTPUT

    /END
/END
/DECODE WHILE_LOOP
    /CATCHALL

        %F:
        scopein
        __LOOP_COND%GEL:
        %OUTPUT1
        IFZ %0 hop __LOOP_END%RGEL
        scopein
        %OUTPUT1
        scopeout
        hop __LOOP_COND%RGEL
        __LOOP_END%RGEL:
        scopeout

    /END
/END
/DECODE DO_WHILE_LOOP
    /CATCHALL

        %F:
        scopein
        hop __LOOP_START%GEL
        __LOOP_COND%RGEL:
        %OUTPUT1
        IFZ %0 hop __LOOP_END%RGEL
        __LOOP_START%RGEL:
        scopein
        %OUTPUT1
        scopeout
        hop __LOOP_COND%RGEL
        __LOOP_END%RGEL:
        scopeout

    /END
/END
/DECODE FOR_LOOP
    /CATCHALL

        %F:
        __FOR_LOOP%GEL:
        %OUTPUT1
        __LOOP_COND%RGEL:
        %OUTPUT1
        IFZ %0 hop __LOOP_END%RGEL
        hop __LOOP_START%RGEL
        __LOOP_TRAILING:
        %OUTPUT1
        hop __LOOP_COND%REGL
        __LOOP_START%RGEL:
        %OUTPUT1
        hop __LOOP_COND%RGEL
        __LOOP_END%RGEL:

    /END
/END
